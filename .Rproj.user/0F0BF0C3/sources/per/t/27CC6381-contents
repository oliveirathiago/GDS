library(ggplot2)
library(patchwork)
library(dplyr)

# Reversed order for y-axis
reversed_levels <- c('Scenario 1', 'Scenario 2', 'Scenario 3', 'Scenario 4', 'Scenario 5', 'Scenario 6') %>% rev

# Create a function to generate consistent plots
create_plot <- function(data, title) {
  ggplot(data, aes(y = Coefficient, x = scen, colour = mor, group = mor)) +
    geom_errorbar(aes(ymin = ci.lower, ymax = ci.upper, alpha = significance), 
                  width = 0.25, position = position_dodge(width = 1), lwd = 0.5) +
    geom_point(aes(shape = significance, alpha = significance, group = mor), 
               position = position_dodge(width = 1)) +
    scale_alpha_manual(values = c(1), guide = "none") +  # Remove alpha legend
    scale_shape_manual(
      values = c(8), 
      labels = c("95% confidence interval\ndoes not cross zero"),
      guide = guide_legend(title = NULL)  # Remove shape legend title
    ) +
    geom_hline(yintercept = 0, size = 0.35, linetype = "dashed", color = 'darkgray') +
    coord_flip() +
    scale_x_discrete(limits = reversed_levels, breaks = reversed_levels) +
    scale_color_brewer(palette = "Dark2") +
    labs(title = title, x = NULL, y = NULL, colour = NULL) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, vjust = 2, colour = "#3C3C3C", size = 12),
      axis.text.y = element_text(colour = "#3C3C3C", size = 10),
      axis.text.x = element_text(colour = "#3C3C3C", size = 8),
      panel.grid.major = element_blank(), 
      panel.grid.minor = element_blank(),
      panel.background = element_blank(),
      axis.line = element_line(colour = "#3C3C3C", size = 0.2),
      legend.title = element_text(colour = "#3C3C3C", size = 10),
      legend.key = element_blank(),
      strip.background = element_blank(),
      strip.text = element_text(colour = "#3C3C3C", size = 8),
      legend.text = element_text(colour = "#3C3C3C", size = 8),
      plot.margin = margin(0.5, 0, 0.5, 0, "cm"),
      aspect.ratio = 1
    )
}

create_plot_sig <- function(data, title) {
  ggplot(data, aes(y = Coefficient, x = scen, colour = mor, group = mor)) +
    geom_errorbar(aes(ymin = ci.lower, ymax = ci.upper, alpha = significance), 
                  width = 0.25, position = position_dodge(width = 1), lwd = 0.5) +
    geom_point(aes(shape = significance, alpha = significance, group = mor), 
               position = position_dodge(width = 1)) +
    scale_alpha_manual(values = c(.3, 1), guide = "none") +  # Remove alpha legend
    scale_shape_manual(
      values = c(NA, 8), 
      labels = c("", "95% confidence interval\ndoes not cross zero"),
      guide = guide_legend(title = NULL)  # Remove shape legend title
    ) +
    geom_hline(yintercept = 0, size = 0.35, linetype = "dashed", color = 'darkgray') +
    coord_flip() +
    scale_x_discrete(limits = reversed_levels, breaks = reversed_levels) +
    scale_color_brewer(palette = "Dark2") +
    labs(title = title, x = NULL, y = NULL, colour = NULL) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, vjust = 2, colour = "#3C3C3C", size = 12),
      axis.text.y = element_text(colour = "#3C3C3C", size = 10),
      axis.text.x = element_text(colour = "#3C3C3C", size = 8),
      panel.grid.major = element_blank(), 
      panel.grid.minor = element_blank(),
      panel.background = element_blank(),
      axis.line = element_line(colour = "#3C3C3C", size = 0.2),
      legend.title = element_text(colour = "#3C3C3C", size = 10),
      legend.key = element_blank(),
      strip.background = element_blank(),
      strip.text = element_text(colour = "#3C3C3C", size = 8),
      legend.text = element_text(colour = "#3C3C3C", size = 8),
      plot.margin = margin(0.5, 0, 0.5, 0, "cm"),
      aspect.ratio = 1
    )
}

##################################################


# Split data by mod
dataplot_arrest_crime <- dataplot_all %>% filter(var == "crime", mod == "arrest")
dataplot_morality_crime <- dataplot_all %>% filter(var == "crime", mod == "morality")
dataplot_purchase_crime <- dataplot_all %>% filter(var == "crime", mod == "purchase")

# Generate individual plots
plot_arrest_crime <- create_plot(dataplot_arrest_crime, "Been arrested?")
plot_morality_crime <- create_plot(dataplot_morality_crime, "Moral judgements")
plot_purchase_crime <- create_plot(dataplot_purchase_crime, "Purchased drugs?")

# Combine with patchwork, adding the overall title
combined_plot_crime <- (plot_arrest_crime + plot_morality_crime + plot_purchase_crime) +
  plot_layout(ncol = 1, guides = "collect") +
  plot_annotation(
    title = "Relationship between outcome-specific expectations and support for each scenario",
    subtitle = "Outcome-specific expectation: 'Approach would reduce crime and public disorder'",
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 12)
    )
  )

# Print the combined plot
print(combined_plot_crime)

pdf("plots/1_plot_reducecrime.pdf", width = 10, height = 12, paper = 'a4r')
print(combined_plot_crime)
dev.off()


##############################################################

# Split data by mod
dataplot_arrest_encour <- dataplot_all %>% filter(var == "encour", mod == "arrest")
dataplot_morality_encour <- dataplot_all %>% filter(var == "encour", mod == "morality")
dataplot_purchase_encour <- dataplot_all %>% filter(var == "encour", mod == "purchase")


# Generate individual plots
plot_arrest <- create_plot_sig(dataplot_arrest_encour, "Been arrested?")
plot_morality <- create_plot_sig(dataplot_morality_encour, "Moral judgements")
plot_purchase <- create_plot_sig(dataplot_purchase_encour, "Purchased drugs?")

# Combine with patchwork, adding the overall title
combined_plot_encour <- (plot_arrest + plot_morality + plot_purchase) +
  plot_layout(ncol = 1, guides = "collect") +
  plot_annotation(
    title = "Relationship between outcome-specific expectations and support for each scenario",
    subtitle = "Outcome-specific expectation: 'Approach would encourage drug use'",
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 12)
    )
  )

# Print the combined plot
print(combined_plot_encour)

pdf("plots/2_plot_encour.pdf", width = 10, height = 12, paper = 'a4r')
print(combined_plot_encour)
dev.off()


##############################################################

# Split data by mod
dataplot_arrest_free <- dataplot_all %>% filter(var == "free", mod == "arrest")
dataplot_morality_free <- dataplot_all %>% filter(var == "free", mod == "morality")
dataplot_purchase_free <- dataplot_all %>% filter(var == "free", mod == "purchase")


# Generate individual plots
plot_arrest_free <- create_plot_sig(dataplot_arrest_free, "Been arrested?")
plot_morality_free <- create_plot_sig(dataplot_morality_free, "Moral judgements")
plot_purchase_free <- create_plot_sig(dataplot_purchase_free, "Purchased drugs?")

# Combine with patchwork, adding the overall title
combined_plot_free <- (plot_arrest_free + plot_morality_free + plot_purchase_free) +
  plot_layout(ncol = 1, guides = "collect") +
  plot_annotation(
    title = "Relationship between outcome-specific expectations and support for each scenario",
    subtitle = "Outcome-specific expectation: 'Approach would freeage drug use'",
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 12)
    )
  )

# Print the combined plot
print(combined_plot_free)

pdf("plots/2_plot_free.pdf", width = 10, height = 12, paper = 'a4r')
print(combined_plot_free)
dev.off()
